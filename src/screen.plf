:- module(screen, [menu/2, ansi_code/3, ansi_clean/1, ansi_pos/3, ansi_pos_col/2, ansi_move/3, ansi_sgr/2]).
/** <module> Utilidades de escritura por pantalla
 *
 * Módulo que incluye una serie de utilidades para la escritura por pantalla
 * en terminal, así como un predicado específicamente diseñado para.
 */

%! ansi_code(+Nums:list, +Letter:name):name
%  
%  Devuelve un nombre con la secuencia ANSI correspondiente a Letter con los
%  parámetros de Nums. Por ejemplo, ansi_code([1,33],m) devolverá 'ESC[1;33m'.
ansi_code(Nums, Letter) = R :- ansi_code_(Nums, Letter, "", R).

ansi_code_([], Lt, Str, R) :- name(Lt, S), append(["\033[",Str,S],RS), name(R,RS).
ansi_code_([N|Ns], Lt, Str, R) :- name(N,S),
	(Str=="", append([Str,S], Str2); append([Str,";",S],Str2)),
	ansi_code_(Ns, Lt, Str2, R).

%! ansi_clean:name
%  Devuelve la secuencia ANSI de borrado de pantalla
ansi_clean = ansi_code([2], 'J').

%! ansi_pos(+Line:int, +Column:int):name
%  Devuelve la secuencia ANSI para posicionar el cursor en la línea Line
%  y columna Column.
ansi_pos(L,C) = ansi_code([L,C], 'H').

%! ansi_pos_col(+Column:int):name
%  Devuelve la secuencia ANSI para posicionar el cursor en la columna Column.
ansi_pos_col(C) = ansi_code([C], 'G').

%! ansi_move(+Dir:name, +N:int):name
%  Devuelve la secuencia ANSI para mover el cursor N posiciones en la
%  dirección indicada por Dir (up, down, right o left).
ansi_move(up,N) = ansi_code([N], 'A').
ansi_move(down,N) = ansi_code([N], 'B').
ansi_move(right,N) = ansi_code([N], 'C').
ansi_move(left,N) = ansi_code([N], 'D').

%! ansi_sgr(+Opts:list):name
%  Devuelve la secuencia ANSI que modifica el texto para que cumpla las
%  propiedades de Opts. Opts es una lista que puede contener:
%  - 'reset' para reestablecer el formato original
%  - 'bold' para utilizar texto en negrita
%  - 'underline' para utilizar texto subrayado
%  - 'fg(Color)' para utilizar el color de letra dado
%  - 'bg(Color)' para utilizar el color de fondo dado
ansi_sgr(Opts) = ansi_code(Nums,'m') :- ansi_sgr_(Opts,Nums).

ansi_sgr_([],[]) :- !, rev_(Nums).
ansi_sgr_([C|Cs],[N|Ns]) :- ansi_sgr_(Cs,Ns), ansi_sgr_item(C,N).

ansi_sgr_item(reset,0).
ansi_sgr_item(bold,1).
ansi_sgr_item(underline,4).
% TODO Colors

%! menu(+Data:list, -Result:any)
%
%  Muestra un menú por pantalla y espera a la pulsación de una tecla.
%  El parámetro Data es una lista de términos que dan forma al menú.
%  El valor resultado del menú se unificará con Result.
%
%  Data es una lista de términos, donde cada término puede ser:
%  - title(T)     Escribe el título del menú, dado por T.
%  - subtitle(T)  Escribe el subtítulo del menú, dado por T.
%  - blank(N)     Escribe un total de N líneas en blanco.
%  - text(T)      Escribe una línea de text, dada en T
%  - menu(K,R,T)  Define una opción del menú. K es la tecla que el usuario debe
%                 pulsar para seleccionarla, R es el valor resultado que se
%                 devolverá en Result al seleccionar esta opción, y T es el
%                 texto que se mostrará al usuario como opción.
%  - code(L)      Ejecuta una serie de instrucciones, dadas en L como una lista
%
%  Estos términos se interpretan en orden. Debe definirse al menos una opción
%  de menú, o la llamada no podrá terminar nunca.
menu(Data, Result) :- menu_build([clear|Data]), (menu_select(Data, Result); menu(Data,Result)).

menu_build([]).
menu_build([X|Xs]) :- menu_item(X), menu_build(Xs).

menu_item(title(T)) :- write(T), nl.

menu_item(subtitle(T)) :- write(T), nl.

menu_item(clear) :- !, write(ansi_clean), write(ansi_pos(1, 1)).
menu_item(blank(N)) :- N>0, !, nl, menu_item(blank(N-1)).
menu_item(text(T)) :- write(T), nl.
menu_item(menu(K,R,T)) :- !.
menu_item(code(L)) :- !.
menu_item(_).

menu_select(_,_).